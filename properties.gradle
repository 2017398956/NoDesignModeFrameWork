/**
 * 这里不能直接引用 .properties 文件中的数据，所以下面单独处理了
 */
import org.codehaus.groovy.runtime.StackTraceUtils

int[] sdksAvailable() {
    def sdks = new ByteArrayOutputStream()
    def androidSdkDir = androidSDKDir()
    exec {
        workingDir androidSdkDir + "/tools"
        commandLine './android', 'list'
        standardOutput = sdks
    }
    sdks = sdks
    // get the output
            .toString()
    // split to strings
            .split('\n')
    // leave only strings with API levels
            .findAll { it ==~ /\s*API level:\s*(\d+).*/ }
    // extract the API levels
            .collect { (it =~ /\s*API level:\s*(\d+).*/)[0][1].toInteger() }
    // sort from highest to lowest
            .sort({ a, b -> b <=> a })
    sdks
}

int highestSdkAvailable(int defaultSdk) {
    try {
        def sdks = sdksAvailable()
        def highestSdk = sdks[0]
        if (highestSdk != null) {
            println "Using highest found SDK " + highestSdk
            highestSdk
        } else {
            println "No installed SDKs found. Using default SDK " + defaultSdk
            defaultSdk
        }
    } catch (any) {
        println "Exception while determining highest SDK. Using default SDK " +
                defaultSdk
        StackTraceUtils.sanitize(any).printStackTrace()
        defaultSdk
    }
}

String androidSDKDir() {
    def androidExecPath = new ByteArrayOutputStream()
    try {
        // 默认在 linux 下运行
        exec {
            commandLine 'which', 'android'
            standardOutput = androidExecPath
        }
        println "find android exec path: " + androidExecPath.toString()
        file(androidExecPath.toString().trim()).getParentFile().getParentFile()
    } catch (ExecException) {
        // 说明没有 which 命令或者没有配置 Android 环境变量
        try {
            exec {
                // 2019-11-30 先注释掉
                commandLine 'grep', 'sdk.dir', 'local.properties'
                standardOutput = androidExecPath
            }
        }catch(Exception){
            // local.properties 都是自动生成的并添加 sdk.dir 属性，如果在 linux 下发生了异常
            // 则运行环境是 windows ，那么执行这里的命令
            exec {
                // 2019-11-30 先注释掉
                commandLine 'find', '\"sdk.dir\"', 'local.properties'
                standardOutput = androidExecPath
            }
        }
        println "find android sdk with local.properties: " + androidExecPath.toString()
        androidExecPath.toString().trim().split('=')[1].replace("\\:" , ":")
        // 下面的可能是 linux 下需要的，先注释掉，待验证
        // file(androidExecPath.toString().trim().split('=')[1])
    }
}

String[] buildToolsAvailable() {
    println "sdk dir: " + androidSDKDir()
    def buildToolsDir = new File(androidSDKDir(), "build-tools")
    println "print buildToolsDir1"
    println buildToolsDir.exists()
    println "print buildToolsDir2"
    buildToolsDir.list([accept: { d, f -> !f.contains("android") }] as FilenameFilter).sort { a, b -> b <=> a }
}

String latestBuildToolsAvailable(String defaultBuildTools) {
    try {
        def buildToolsVersions = buildToolsAvailable()
        def latestBuildTools = buildToolsVersions[0]
        if (latestBuildTools != null) {
            println "Using latest found build tools " + latestBuildTools
            latestBuildTools
        } else {
            println "No installed build tools found. Using default build tools " +
                    defaultBuildTools
            defaultBuildTools
        }
    } catch (any) {
        println "Exception while determining latest build tools. Using default build tools " +
                defaultBuildTools
        StackTraceUtils.sanitize(any).printStackTrace()
        defaultBuildTools
    }
}
ext {
    ext_minSdkVersion = minSdkVersion = 16
    ext_compileSdkVersion = compileSdkVersion = 24
    ext_targetSdkVersion = targetSdkVersion = 22
    ext_buildToolsVersion = buildToolsVersion = latestBuildToolsAvailable("24")
    ext_atestBuildToolsAvailable = latestBuildToolsAvailable = this.&latestBuildToolsAvailable

    arseekmonsters_isDebug=false
    fvchat_isDebug=false
    ar_isDebug=false

    indoor_location_sdk_version = "1.0.12"
    indoor_location_interfaces_version = indoor_location_sdk_version
    indoor_location_network_version = indoor_location_sdk_version
    indoor_location_datamining_version = indoor_location_sdk_version
    indoor_location_locatesdk_version = indoor_location_sdk_version

    stat_sdk_version = "1.0.20"
}

