import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main

apply plugin: 'com.android.library'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        // classpath 'com.android.tools.build:gradle:2.1.0'
        classpath "org.aspectj:aspectjtools:${ASPECTJ}"
        classpath "org.aspectj:aspectjweaver:${ASPECTJ}"
    }
}

android {
    compileSdkVersion "${COMPILE_SDK_VERSION}" as int
    buildToolsVersion "${BUILD_TOOLS_VERSION}"

    defaultConfig {
        minSdkVersion "${MIN_SDK_VERSION}" as int
        targetSdkVersion "${TARGET_SDK_VERSION}"
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    testImplementation 'junit:junit:4.12'
    api "org.aspectj:aspectjrt:${ASPECTJ}"
}

android.libraryVariants.all { variant ->
    Task javaCompile = variant.getJavaCompiler()
    javaCompile.doLast {
        String[] args = ["-showWeaveInfo",
                         "-1.5",
                         "-inpath", javaCompile.destinationDir.toString(),
                         "-aspectpath", javaCompile.classpath.asPath,
                         "-d", javaCompile.destinationDir.toString(),
                         "-classpath", javaCompile.classpath.asPath,
                         "-bootclasspath", android.bootClasspath.join(File.pathSeparator)]
        // plugin.project.android.bootClasspath.join(File.pathSeparator)
        println '==================== 参数 aop ===================='
        println Arrays.toString(args)
        println '==================== 参数 aop ===================='
        MessageHandler handler = new MessageHandler(true);
        new Main().run(args, handler)

        def log = project.logger
        for (IMessage message : handler.getMessages(null, true)) {
            switch (message.getKind()) {
                case IMessage.ABORT:
                case IMessage.ERROR:
                case IMessage.FAIL:
                    log.error message.message, message.thrown
                    break;
                case IMessage.WARNING:
                case IMessage.INFO:
                    log.info message.message, message.thrown
                    break;
                case IMessage.DEBUG:
                    log.debug message.message, message.thrown
                    break;
            }
        }
    }
}